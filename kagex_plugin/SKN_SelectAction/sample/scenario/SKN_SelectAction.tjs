with (SelectLayer) {
	/**
	 * 選択肢を追加[seladd]
	 */
	.addSelect_selact = .addSelect;
	.addSelect = function(elm) {
		addSelect_selact(...);
		with (selects[selects.count-1]) {
			.showaction = elm.showaction if elm.showaction != void;
			.hideaction = elm.hideaction if elm.hideaction != void;
		}
	} incontextof SelectLayer;
	
	/**
	 * 選択肢処理開始
	 */
	.start_selact = .start;
	.start = function(parent, absolute) {
		setParent(...);
		var cnt = selects.count;
		var pos = getSelectPositions(cnt);
		var isAction = true;
		for (var i=0; i<cnt; i++) {
			with (selects[i]) {
				var xy = pos[i];
				.setPos(xy[0] - .width/2, xy[1] - .height/2);
				isAction &= (typeof .showaction != "undefined");
			}
		}
		if (kag.selectPrevSkipMode < SKIP_FAST) {
			// スキップ中でない
			if (isAction) {
				// アクションで表示
				actionCnt = cnt;
				visible = true;
				opacity = 0;
				enabled = false;
				for (var i=0; i<cnt; i++) {
					window.beginAction(selects[i], selects[i].showaction, onStartCompleted, false);
				}
			} else {
				// 通常の方法で表示
				setVisibleTime(true, fadeTime, doneActFadeIn);
			}
		} else {
			// スキップ中
			// すぐに表示
			setVisibleTime(true, 0, doneActFadeIn);
		}
		
		playSE(opense, opensebuf);
	} incontextof SelectLayer;

	.actionCnt = 0;
	.onStartCompleted = function() {
		actionCnt--;
		if (actionCnt == 0) {
			doneActFadeIn();
		}
	} incontextof SelectLayer;
	
	/**
	 * 選択肢終了
	 */
	.end = function(select) {
		var isAction = true;
		var cnt = selects.count;
		for (var i=0; i<cnt; i++) {
			isAction &= (typeof selects[i].hideaction != "undefined");
		}
		var elm;
		if (select) with (select) elm = %[ tag:.tag, storage:.storage, target:.target ];
		window.processGo();
		window.insertTag("doneselect", elm !== void ? elm : %[]);
        window.insertTag("se", %[storage:closese, buf:closesebuf]); // バグ修正の部分

		var skipping;
		with (kag) {
			// スキップ中か判別
			skipping = .afterskip && (.selectPrevSkipMode > SKIP_STOP);
			if (skipping && kag.selectPrevSkipMode == SKIP_FAST && !kag.getKeyState(VK_CONTROL)) skipping = false;
		}
		if (!skipping) {
			// スキップ中でない
			if (isAction) {
				// アクションで隠す
				window.insertTag("s");
				enabled = false;
				actionCnt = cnt;
				for (var i=0; i<cnt; i++) {
					window.beginAction(selects[i], selects[i].hideaction, onEndCompleted, false);
				}
			} else {
				// 通常の方法で隠す
				if (setVisibleTime(false, fadeTime)) {
					window.insertTag("wact", %[ target:this ]);
				}
			}
		} else {
			// スキップ中
			setVisibleTime(false, 0);
		}
	} incontextof SelectLayer;
	.onEndCompleted = function() {
		actionCnt--;
		if (actionCnt == 0) {
			window.processGo();
		}
	} incontextof SelectLayer;
}
with (kag) {
	/**
	 * selact タグの定義
	 */
	.selectAction = function(elm) {
		if (elm.type != void) {
			var target = elm.hide ? "hideaction" : "showaction";
			var canskip = elm.canskip !== void ? +elm.canskip : true;
			switch (elm.type) {
			case "scroll":
				var actDic = %[
					time : elm.time !== void ? +elm.time : 500,
					canskip : canskip,
					accel : elm.accel !== void ? +elm.accel : 0,
					left : %[ handler:MoveAction, start:"@", value:"@"],
					top  : %[ handler:MoveAction, start:"@", value:"@"],
					opacity : %[ handler:MoveAction, start:255, value:255 ],
				];
				if (target == "showaction") {
					switch (elm.from) {
					default: /* fall through */
					case "left":   actDic.left.start = "@+"+kag.width; break;
					case "top":    actDic.top.start = "@-"+kag.height; break;
					case "right":  actDic.left.start = "@-"+kag.width; break;
					case "bottom": actDic.top.start = "@+"+kag.height; break;
					}
				} else {
					switch(elm.from) {
					default: /* fall through */
					case "left":   actDic.left.value = "@-"+kag.width; break;
					case "top":    actDic.top.value = "@+"+kag.height; break;
					case "right":  actDic.left.value = "@+"+kag.width; break;
					case "bottom": actDic.top.value = "@-"+kag.height; break;
					}
				}
				_internalSelectAction(actDic, elm.waittime !== void ? +elm.waittime : 0, target, elm.reverse == "void" ? false : +elm.reverse);
				break;
			case "fade":
				var actDic = %[
					time : elm.time !== void ? +elm.time : 500,
					accel : elm.accel !== void ? +elm.accel : 0,
					canskip : canskip,
				];
				if (target == "hideaction") {
					actDic.opacity = %[ handler:MoveAction, start:255, value:0 ];
				} else {
					actDic.opacity = %[ handler:MoveAction, start:0, value:255 ];
				}
				_internalSelectAction(actDic, elm.waittime !== void ? +elm.waittime : 0, target, elm.reverse == "void" ? false : +elm.reverse);
				break;
			default:
				break;
			}
		}
		return 0;
	} incontextof kag;
	/**
	 * selectAction の内部関数
	 * @param dic アクション情報の入った辞書
	 * @param interval アクションを実行する間隔(ms単位)
	 * @param target "showaction" または "hideaction"
	 * @param reverse true を指定すると逆順
	 */
	._internalSelectAction = function(dic, interval, target, reverse) {
		if (reverse) {
			for (var i=0; i<f.selectInfos.count; ++i) {
				if (f.selectInfos[i][target] == void) {
					f.selectInfos[i][target] = %[];
					dic.delay = interval*(f.selectInfos.count-i-1);
					(Dictionary.assignStruct incontextof f.selectInfos[i][target])(dic);
				}
			}
		} else {
			for (var i=0; i<f.selectInfos.count; ++i) {
				if (f.selectInfos[i][target] == void) {
					f.selectInfos[i][target] = %[];
					dic.delay = interval*i;
					(Dictionary.assignStruct incontextof f.selectInfos[i][target])(dic);
				}
			}
		}
	} incontextof kag;

	// selact タグを追加
	.tagHandlers.selact = function(elm) {
		return selectAction(elm);
	} incontextof kag;
}
