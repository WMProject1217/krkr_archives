class Biscrat_MouseGesture
{
	var _threshold = 50;
	var _type = __BISCRAT_MOUSE_GESTURE_TYPE_FOUR_DIRECTION;
	var _limit = 1;
	/** Move the mouse pointer with this button down */
	var _mouseButton = mbRight;
	
	var _isMouseDown = false;
	var _px, _py;
	var _gestures = "";
	var _gestureCallbacks = %[];
	var _gestureEnabled = false;
	var _gestureOverflow = false;
	
	/**
	 * Gets or sets whether the mouse gesture sensitivity.
	 * @type int
	 */
	property threshold {
		setter(v) { clearGesture(); _threshold = +v; }
		getter { return _threshold; }
	}
	
	/**
	 * Gets or sets gesture types.
	 * @type int
	 */
	property type {
		setter(v) { clearGesture(); _type = v; }
		getter { return _type; }
	}
	
	/**
	 * Gets or sets the max length of a mouse gesture.
	 * @type int
	 */
	property limit {
		setter(v) { clearGesture(); _limit = v; }
		getter { return _limit; }
	}
	
	/**
	 * Gets or sets the mouse button used to ditect gestures.
	 * @type int
	 */
	property button {
		setter(v) { clearGesture(); _mouseButton = v; }
		getter { return _mouseButton; }
	}
	
	/**
	 * Gets or sets whether the mouse gesture is enabled.
	 * @type bool
	 */
	property enabled {
		setter(v) { clearGesture(); _gestureEnabled = !!v; }
		getter { return _gestureEnabled; }
	}
	
	
	function Biscrat_MouseGesture() {
		Serializable(this, [
			"_threshold",
			"_type",
			"_limit",
			"_mouseButton",
			"_gestureEnabled"
		]);
	}
	
	function finalize()
	{
		invalidate _gestureCallbacks;
	}
	
	/**
	 * This function must be called when the mouse button is down.
	 * @param number x the x-coordinate of the mouse.
	 * @param number y the y-coordinate of the mouse.
	 * @param int button the mouse button clicked.
	 */
	function onMouseDown(x, y, button)
	{
		if (button & _mouseButton) {
			clearGesture();
			_isMouseDown = true;
			_px = x;
			_py = y;
		}
	}
	
	/**
	 * This function must be called when the mouse pointer is moved.
	 * @param number x the x-coordinate of the mouse.
	 * @param number y the y-coordinate of the mouse.
	 */
	function onMouseMove(x, y)
	{
		if (!_isMouseDown) { return; }
		if (_type === __BISCRAT_MOUSE_GESTURE_TYPE_FOUR_DIRECTION) {
			if (_px-x >= _threshold) inputGesture("4");
			else if (x-_px >= _threshold) inputGesture("6");
			else if (_py-y >= _threshold) inputGesture("2");
			else if (y-_py >= _threshold) inputGesture("8");
			else return;
		} else {
			if (Math.pow(x-_px, 2) + Math.pow(y-_py, 2) >= _threshold * _threshold) {
				var qpi = __PI/8;
				var theta = Math.atan2(y-_py, x-_px);
				if (theta < -qpi*7) inputGesture("4");
				else if (theta < -qpi*5) inputGesture("1");
				else if (theta < -qpi*3) inputGesture("2");
				else if (theta < -qpi*1) inputGesture("3");
				else if (theta < qpi*1) inputGesture("6");
				else if (theta < qpi*3) inputGesture("9");
				else if (theta < qpi*5) inputGesture("8");
				else if (theta < qpi*7) inputGesture("7");
				else inputGesture("4");
			} else {
				return;
			}
		}
		_px = x, _py = y;
	}
	
	/**
	 * This function must be called when the mouse is up.
	 * @param number x the x-coordinate of the mouse.
	 * @param number y the y-coordinate of the mouse.
	 * @param int button the mouse button clicked.
	 * @return bool true if a gesture is invoked.
	 */
	function onMouseUp(x, y, button)
	{
		var ret = false;
		if (button & _mouseButton) {
			if (_isMouseDown) {
				ret = doGesture();
			}
			clearGesture();	
		}
		return ret;
	}

	/**
	 * Records mouse gesture while mouse moving.
	 * @param string gesture Gesture input.
	 */
	function inputGesture(gesture)
	{
		if (_gestureOverflow) { return; }
		var len = _gestures.length;
		if (len == 0 || _gestures[len-1] != gesture) {
			// Record the gesture if it differs from previous gesture.
			_gestures += gesture;
		}
		if (_gestures.length > _limit) {
			_gestureOverflow = true;
		}
	}
	
	/**
	 * Cancels the current input.
	 */
	function clearGesture()
	{
		_isMouseDown = false;
		_gestures = "";
		_gestureOverflow = false;
	}
	
	/**
	 * Calls the registered function if gesture is detected.
	 * @return bool True, if the callback function is called.
	 */
	function doGesture()
	{
		var called = false;
		if (_gestureEnabled && !_gestureOverflow && _gestures.length != 0) {
			if (_gestureCallbacks.all !== void){
				_gestureCallbacks.all(_gestures);
				called = true;
			}
			if (_gestureCallbacks[_gestures] !== void) {
				_gestureCallbacks[_gestures](_gestures);
				called = true;
			}
		}
		return called;
	}
	
	/**
	 * Registers the callback function called when the mouse gesture is ditected.
	 * @param string gestures The mouse gesture to call the callback function.
	 * @param func callback The callback function. 
	 */
	function addCallback(gestures, callback)
	{
		_gestureCallbacks[string(gestures)] = callback;
	}
	
	/**
	 * Unregisters the callback function.
	 * @param string gestures The mouse gesture to remove the callback function.
	 */
	function removeCallback(gestures)
	{
		addCallback(gestures, void);
	}
	
	/**
	 * Unregisters the all callback functions.
	 */
	function clearCallback()
	{
		(Dictionary.clear incontextof _gestureCallbacks)();
	}
}
