class Biscrat_Events
{
	var __eventCallbacks = %[];
	function Biscrat_Events() {}
	
	function finalize() {
		foreach(__eventCallbacks, function(event, callbacks) {
			invalidate callbacks;
		});
		invalidate __eventCallbacks;
	}
	
	/**
	 * Bind a callback function to an event.
	 * The callback will be invoked whenever the event is fired.
	 *
	 * Callbacks bound to the special "all" event will be invoked when any event is fired.
	 * These callbacks are passed the name of the event as the first argument.
	 * @param string event The event name to bind.
	 * @param func callback The function to bind.
	 */
	function bind(event, callback) {
		if (__eventCallbacks[event] === void) {
			__eventCallbacks[event] = [];
		}
		__eventCallbacks[event].add(callback);
	}
	
	/**
	 * Bind callbacks to events according to a specified dictionary.
	 * The following two lines are almost same.
	 *   bindMap(%[ event => callback, even2 => callback2 ]);
	 *   bind(event, callback), bind(event2, callback2);
	 * @param dictionary map The dictionary object contains evant names and callbacks.
	 */
	function bindMap(map) {
		foreach(map, bind);
	}
	
	/**
	 * Remove a callback function from an event.
	 * If no event is specified, callback for all events will be removed.
	 * If no callback is specified, all callback for the event will be removed.
	 * If neither event nor callback is specified, all callback will be removed.
	 * @param string event The event name to unbind.
	 * @param func callback The function to unbind.
	 */
	function unbind(event, callback) {
		if (event !== void) {
			if (__eventCallbacks[event] !== void) {
				if (callback !== void) {
					__eventCallbacks[event].remove(callback, true);
				} else {
					invalidate __eventCallbacks[event];
					delete __eventCallbacks[event];
				}
			}
		} else  {
			if (callback !== void) {
				foreach(__eventCallbacks, function(event, callbacks, callback) {
					callbacks.remove(callback, true);
				}, callback);
			} else {
				(Dictionary.clear incontextof __eventCallbacks)();
			}
		}
	}
	
	/**
	 * Trigger callback for the given event.
	 * Subsequent arguments will be passed along to the event callbacks.
	 * @param string event The event name to trigger.
	 * @param mixed * The arguments passed to callbacks.
	 */
	function trigger(event, *) {
		var callbacks = [];
		if (__eventCallbacks.all !== void) {
			callbacks.assign(__eventCallbacks.all);
			for (var i = 0; i < callbacks.count; ++i) {
				callbacks[i](...);
			}
			callbacks.clear();
		}
		if (event !== "all" && __eventCallbacks[event] !== void) {
			callbacks.assign(__eventCallbacks[event]);
			for (var i = 0; i < callbacks.count; ++i) {
				callbacks[i](*);
			}
		}
	}
}
